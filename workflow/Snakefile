
samples = ["SRR10379721", "SRR10379722", "SRR10379723", "SRR10379724", "SRR10379725", "SRR10379726"] #références des accesions 

samples_dev = [ "SRR10379725", "SRR10379726"] #références des accesions 


rule all:
    input:
        "ref_genome.1.ebwt",  # L'index du génome est l'objectif final
        expand("{sample}.fastq" , sample=samples_dev)
rule download_ref_genome:
    output:
        "ref_genome.fna"  # fichier au format FASTA (.fa)
    threads: 1 #la règle utilisera un coeur (car il y a un unique fichier)
    shell:
        "wget -O - https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/013/425/GCF_000013425.1_ASM1342v1/GCF_000013425.1_ASM1342v1_genomic.fna.gz | gzip -d > {output}"

rule download_annotated_ref_genome:
    output:
        "ref_genome.gff"  #annotation au format .gff
    threads: 1 #la règle utilisera un coeur (car il y a un unique fichier)
    shell:
        "wget -O - https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/013/425/GCF_000013425.1_ASM1342v1/GCF_000013425.1_ASM1342v1_genomic.gff.gz | gzip -d > {output}"


rule index_genome:
    input:
        "ref_genome.fna"
    output:
        "ref_genome.{obs}.ebwt"
    threads: 1
    singularity : "img/bowtie.sif"
    resources:
        shell_exec="sh"
    shell:
        "bowtie-build {input} ref_genome"


###RNA SEQ



rule create_raw_dir: #création d'un répertoire raw pour stocker les fichiers temporaires
    output:
        directory("raw")
    shell:
        "mkdir -p raw"

#rule all:
#    input:
#        expand("trimmed_{sample}.fq.gz", sample=samples) #la fonction expand fait le bouclage cf. cours

rule download_rnaseq:
    output:
        temp("{sample}/{sample}.sra") #permet l'utilisation temporaire puis de supprimer afin de ne pas garder des fichiers lourds et inutiles
    singularity : "img/sra_toolkit.sif"
    resources:
        shell_exec="sh"
    shell:
        "prefetch {wildcards.sample}" #les fichiers samples sont stocker tous stocker dans un fichier raw

rule extract_rnaseq:
    input :
        "{sample}/{sample}.sra"
    output:
        "{sample}.fastq" 
    singularity : "img/sra_toolkit.sif"
    resources:
        shell_exec="sh"
    shell:
        "fasterq-dump --threads=1 {input}" 

rule trim_galore:
    input:
        "raw/{sample}.fastq"
    output:
        "trimmed_{sample}.fq.gz" #toujours au format fastQ zippé
    threads: 3
    params:
        docker_image="trim_galore"  # Nom de l'image Docker
    shell:
        "docker run --rm -v {wildcards.dir}:/data {params.docker_image} --gzip {input} -o ./trimmed"
        #on compresse toujours en sortie les fchiers au format gzip
        #création d'un fichier de sortie pour stocker les informations de trim_galore. Fichier s'appelle "trimmed" via -o ./trimmed
